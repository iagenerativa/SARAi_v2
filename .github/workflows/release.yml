# .github/workflows/release.yml
# SARAi v2.6 - Release & Sign (DevSecOps)
#
# Flujo automático con logging detallado y consolidación de etapas:
#   git tag v2.6.2 && git push origin v2.6.2
#   → Build multi-arch (con logs detallados)
#   → Genera SBOM (Syft)
#   → Firma con Cosign (OIDC keyless)
#   → Publica en GHCR + GitHub Release
#   → Sube dashboard a Grafana Cloud
#
# Cada etapa genera:
#   - Logs detallados en GITHUB_STEP_SUMMARY
#   - Artifacts de milestone para skip en re-runs
#   - Timestamps precisos para debugging

name: SARAi v2.6 - Release & Sign

on:
  push:
    tags:
      - 'v*.*.*'  # Matches v2.5.0, v2.5.1, v2.6.0, etc.

jobs:
  release-and-sign:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Crear GitHub Release
      packages: write      # Push a GHCR
      id-token: write      # Cosign OIDC signing
      attestations: write  # Attestation storage

    steps:
      # ============================================================
      # 0. MILESTONE LOGGING SETUP
      # ============================================================
      - name: "📊 MILESTONE 0: Initialize Deployment Log"
        run: |
          echo "# 🚀 SARAi Deployment Log - ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Started**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: Tag push \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Runner**: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Deployment Milestones" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ M0: Deployment initialized at $(date -u +"%H:%M:%S")"

      # ============================================================
      # 1. CHECKOUT & SETUP
      # ============================================================
      - name: "📥 MILESTONE 1: Checkout código"
        uses: actions/checkout@v4
        
      - name: "📊 Log M1 Complete"
        run: |
          # CRÍTICO: Crear directorio DESPUÉS del checkout (checkout limpia workspace)
          mkdir -p .milestones
          echo "deployment_started=$(date +%s)" > .milestones/M0_init.txt
          echo "checkout_complete=$(date +%s)" > .milestones/M1_checkout.txt
          
          echo "✅ **M1: Checkout** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "  - Commit SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "  - Tag: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ M1: Checkout completed"

      - name: "🔧 MILESTONE 2: Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3
        
      - name: "📊 Log M2 Complete"
        run: |
          echo "✅ **M2: Docker Buildx** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          docker buildx version >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "buildx_setup=$(date +%s)" > .milestones/M2_buildx.txt
          echo "✅ M2: Buildx configured"

      - name: "🔐 MILESTONE 3: Login to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "📊 Log M3 Complete"
        run: |
          echo "✅ **M3: GHCR Login** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Registry: ghcr.io" >> $GITHUB_STEP_SUMMARY
          echo "  - User: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ghcr_login=$(date +%s)" > .milestones/M3_ghcr.txt
          echo "✅ M3: GHCR authenticated"

      # ============================================================
      # 4. BUILD & PUSH MULTI-ARCH (with detailed logging)
      # ============================================================
      - name: "📦 MILESTONE 4: Extract repository name"
        id: repo
        run: |
          REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')
          echo "name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "Repository: $REPO_NAME"
          echo "extract_repo=$(date +%s)" > .milestones/M4_repo.txt

      # ============================================================
      # 5A. BUILD AMD64 (separated for resource optimization)
      # ============================================================
      - name: "🏗️ MILESTONE 5A: Build & Push AMD64 Image"
        id: build_amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}-amd64
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64
          build-args: |
            SARAI_VERSION=${{ github.ref_name }}
            
      - name: "📊 Log M5A Complete"
        run: |
          echo "✅ **M5A: AMD64 Build** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Image: \`ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}-amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "  - Digest: \`${{ steps.build_amd64.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "docker_build_amd64=$(date +%s)" > .milestones/M5A_amd64.txt
          echo "digest_amd64=${{ steps.build_amd64.outputs.digest }}" >> .milestones/M5A_amd64.txt
          echo "✅ M5A: AMD64 image built and pushed"
      
      # Clean docker cache after AMD64 build
      - name: "🧹 Clean Docker Cache (post-AMD64)"
        run: |
          echo "Cleaning Docker system after AMD64 build..."
          docker system prune -af --volumes
          echo "✅ Docker cache cleaned"
          
      # ============================================================
      # 5B. BUILD ARM64 (separated for resource optimization)
      # ============================================================
      - name: "🏗️ MILESTONE 5B: Build & Push ARM64 Image"
        id: build_arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}-arm64
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64
          build-args: |
            SARAI_VERSION=${{ github.ref_name }}
            
      - name: "📊 Log M5B Complete"
        run: |
          echo "✅ **M5B: ARM64 Build** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Image: \`ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}-arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "  - Digest: \`${{ steps.build_arm64.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "docker_build_arm64=$(date +%s)" > .milestones/M5B_arm64.txt
          echo "digest_arm64=${{ steps.build_arm64.outputs.digest }}" >> .milestones/M5B_arm64.txt
          echo "✅ M5B: ARM64 image built and pushed"
      
      # Clean docker cache after ARM64 build
      - name: "🧹 Clean Docker Cache (post-ARM64)"
        run: |
          echo "Cleaning Docker system after ARM64 build..."
          docker system prune -af --volumes
          echo "✅ Docker cache cleaned"
      
      # ============================================================
      # 5C. CREATE MULTI-ARCH MANIFEST (combines AMD64 + ARM64)
      # ============================================================
      - name: "📦 MILESTONE 5C: Create Multi-Arch Manifest"
        id: build
        run: |
          echo "Creating multi-arch manifest..."
          
          # Create and push manifest list
          docker buildx imagetools create -t ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }} \
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}-amd64 \
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}-arm64
          
          docker buildx imagetools create -t ghcr.io/${{ steps.repo.outputs.name }}:latest \
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}-amd64 \
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}-arm64
          
          # Get manifest digest (fix: use --raw to get only the digest)
          DIGEST=$(docker buildx imagetools inspect ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }} --raw | sha256sum | awk '{print "sha256:"$1}')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          
          echo "✅ Multi-arch manifest created with digest: $DIGEST"
          
      - name: "📊 Log M5C Complete"
        run: |
          echo "✅ **M5C: Multi-Arch Manifest** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Image: \`ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "  - Digest: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "  - Platforms: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "docker_manifest=$(date +%s)" > .milestones/M5C_manifest.txt
          echo "digest=${{ steps.build.outputs.digest }}" >> .milestones/M5C_manifest.txt
          echo "✅ M5C: Multi-arch manifest complete"
          
      # Save artifact for potential re-runs
      - name: "💾 Save M5C Artifact (Docker Build Success)"
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-milestone
          path: |
            .milestones/M5A_amd64.txt
            .milestones/M5B_arm64.txt
            .milestones/M5C_manifest.txt
          retention-days: 7
          if-no-files-found: warn  # Fix: No fallar si .milestones/ está vacío
      
      # Final cleanup before SBOM/signing
      - name: "🧹 Final Docker Cleanup (pre-SBOM)"
        run: |
          echo "Final cleanup before SBOM generation..."
          docker system prune -af --volumes
          docker buildx prune -af
          echo "✅ All temporary Docker artifacts cleaned"
          df -h  # Show disk space

      # ============================================================
      # 6-8. SECURITY: SBOM + COSIGN SIGNING (with detailed logging)
      # ============================================================
      - name: "🔒 MILESTONE 6: Install Cosign"
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'
          
      - name: "📊 Log M6 Complete"
        run: |
          echo "✅ **M6: Cosign Installed** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          cosign version >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "cosign_install=$(date +%s)" > .milestones/M6_cosign.txt
          echo "✅ M6: Cosign ready"

      - name: "📋 MILESTONE 7: Install Syft (SBOM Generator)"
        run: |
          echo "Installing Syft..."
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft version
          
      - name: "📊 Log M7 Complete"
        run: |
          echo "✅ **M7: Syft Installed** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          syft version >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "syft_install=$(date +%s)" > .milestones/M7_syft.txt
          echo "✅ M7: Syft ready"

      - name: "📄 MILESTONE 8: Generate SBOM"
        run: |
          echo "Generating SBOM for ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}..."
          
          # SPDX format
          syft ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }} \
            -o spdx-json=sbom.spdx.json
          
          # CycloneDX format
          syft ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }} \
            -o cyclonedx-json=sbom.cyclonedx.json
          
          # Human-readable table
          syft ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }} \
            -o table > sbom.txt
          
          # Count packages
          PACKAGE_COUNT=$(jq '.packages | length' sbom.spdx.json)
          echo "SBOM generated: $PACKAGE_COUNT packages"
          
      - name: "📊 Log M8 Complete"
        run: |
          PACKAGE_COUNT=$(jq '.packages | length' sbom.spdx.json)
          echo "✅ **M8: SBOM Generated** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Format: SPDX + CycloneDX" >> $GITHUB_STEP_SUMMARY
          echo "  - Packages: $PACKAGE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "  - Files: sbom.spdx.json, sbom.cyclonedx.json, sbom.txt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "sbom_generate=$(date +%s)" > .milestones/M8_sbom.txt
          echo "package_count=$PACKAGE_COUNT" >> .milestones/M8_sbom.txt
          echo "✅ M8: SBOM complete ($PACKAGE_COUNT packages)"
          
      - name: "💾 Save M8 Artifact (SBOM Success)"
        uses: actions/upload-artifact@v4
        with:
          name: sbom-milestone
          path: |
            .milestones/M8_sbom.txt
            sbom.*.json
            sbom.txt
          retention-days: 90
          if-no-files-found: warn  # Fix: No fallar si archivos no existen

      - name: "🔐 MILESTONE 9: Sign Docker Image (Cosign OIDC)"
        run: |
          echo "Signing image with Cosign (OIDC keyless)..."
          cosign sign --yes \
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}@${{ steps.build.outputs.digest }}
          echo "✅ Image signed successfully"
          
      - name: "📊 Log M9 Complete"
        run: |
          echo "✅ **M9: Image Signed** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Method: Cosign OIDC Keyless" >> $GITHUB_STEP_SUMMARY
          echo "  - Digest: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "  - Verification: \`cosign verify ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "cosign_sign=$(date +%s)" > .milestones/M9_sign.txt
          echo "✅ M9: Image signature complete"

      - name: "📎 MILESTONE 10: Attest SBOM to Image"
        run: |
          echo "Attaching SBOM as attestation..."
          cosign attest --yes --type spdxjson \
            --predicate sbom.spdx.json \
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}@${{ steps.build.outputs.digest }}
          echo "✅ SBOM attestation complete"
          
      - name: "📊 Log M10 Complete"
        run: |
          echo "✅ **M10: SBOM Attested** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Type: spdxjson" >> $GITHUB_STEP_SUMMARY
          echo "  - Verification: \`cosign verify-attestation --type spdxjson ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "sbom_attest=$(date +%s)" > .milestones/M10_attest.txt
          echo "✅ M10: SBOM attestation complete"

      # ============================================================
      # 11-12. GITHUB RELEASE (with detailed logging)
      # ============================================================
      - name: "📝 MILESTONE 11: Extract CHANGELOG"
        id: changelog
        run: |
          echo "Extracting CHANGELOG for ${{ github.ref_name }}..."
          VERSION=${{ github.ref_name }}
          
          # Attempt to extract version-specific changelog
          if [ -f CHANGELOG.md ]; then
            awk "/^## \[${VERSION#v}\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md > release_notes.md || \
              echo "Release $VERSION" > release_notes.md
          else
            echo "Release $VERSION" > release_notes.md
          fi
          
          # Show preview
          echo "Release notes preview:"
          head -n 5 release_notes.md
          
      - name: "📊 Log M11 Complete"
        run: |
          echo "✅ **M11: CHANGELOG Extracted** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "changelog_extract=$(date +%s)" > .milestones/M11_changelog.txt
          echo "✅ M11: Release notes ready"

      - name: "🎉 MILESTONE 12: Create GitHub Release"
        uses: ncipollo/release-action@v1
        with:
          artifacts: "sbom.spdx.json,sbom.cyclonedx.json,sbom.txt"
          bodyFile: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          
      - name: "📊 Log M12 Complete"
        run: |
          echo "✅ **M12: GitHub Release Created** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Tag: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "  - Artifacts: sbom.spdx.json, sbom.cyclonedx.json, sbom.txt" >> $GITHUB_STEP_SUMMARY
          echo "  - URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "github_release=$(date +%s)" > .milestones/M12_release.txt
          echo "✅ M12: GitHub release published"

      # ============================================================
      # 13-14. GRAFANA DASHBOARD (optional, non-blocking)
      # ============================================================
      - name: "📊 MILESTONE 13: Setup Python for Grafana"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: "📦 Install requests library"
        run: |
          pip install requests
          python -c "import requests; print(f'requests version: {requests.__version__}')"

      - name: "📈 MILESTONE 14: Publish Dashboard to Grafana (optional)"
        continue-on-error: true  # Non-blocking
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
          GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
        run: |
          echo "Attempting Grafana dashboard publish..."
          
          if [ -z "$GRAFANA_API_KEY" ] || [ -z "$GRAFANA_URL" ]; then
            echo "⚠️  Grafana credentials not configured (skipping)"
            echo "grafana_skip=true" > .milestones/M14_grafana.txt
            exit 0
          fi
          
          if [ -f scripts/publish_grafana.py ]; then
            python scripts/publish_grafana.py
            echo "✅ Grafana dashboard published"
            echo "grafana_publish=$(date +%s)" > .milestones/M14_grafana.txt
          else
            echo "⚠️  scripts/publish_grafana.py not found (skipping)"
            echo "grafana_skip=true" > .milestones/M14_grafana.txt
          fi
          
      - name: "📊 Log M14 Status"
        if: always()
        run: |
          if [ -f .milestones/M14_grafana.txt ] && grep -q "grafana_publish" .milestones/M14_grafana.txt; then
            echo "✅ **M14: Grafana Dashboard Published** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  **M14: Grafana Skipped** - $(date -u +"%H:%M:%S UTC") (non-critical)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      # ============================================================
      # 15-16. VALIDATION & FINAL SUMMARY
      # ============================================================
      - name: "🔍 MILESTONE 15: Verify Cosign Signature"
        run: |
          echo "Auto-verifying Cosign signature..."
          cosign verify \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}@${{ steps.build.outputs.digest }}
          echo "✅ Signature verified successfully"
          
      - name: "📊 Log M15 Complete"
        run: |
          echo "✅ **M15: Signature Verified** - $(date -u +"%H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "  - Verification: PASSED ✅" >> $GITHUB_STEP_SUMMARY
          echo "  - OIDC Issuer: token.actions.githubusercontent.com" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "signature_verify=$(date +%s)" > .milestones/M15_verify.txt
          echo "✅ M15: Signature validation complete"

      - name: "📊 MILESTONE 16: Generate Final Summary"
        if: always()
        run: |
          # Calculate total deployment time
          START_TIME=$(cat .milestones/M0_init.txt | grep deployment_started | cut -d'=' -f2)
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          DURATION_MIN=$((DURATION / 60))
          DURATION_SEC=$((DURATION % 60))
          
          cat << EOF >> $GITHUB_STEP_SUMMARY
          
          ---
          
          ## 🎉 Deployment Complete!
          
          **Total Duration**: ${DURATION_MIN}m ${DURATION_SEC}s
          **Completed**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### 📦 Published Artifacts
          
          - **Docker Image**: \`ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}\`
          - **Digest**: \`${{ steps.build.outputs.digest }}\`
          - **Platforms**: linux/amd64, linux/arm64
          - **SBOM**: Attached to release (SPDX + CycloneDX)
          - **Signature**: Cosign keyless OIDC ✅
          - **Release**: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}
          
          ### ✅ Verification Commands
          
          \`\`\`bash
          # Verify signature
          cosign verify \\
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/*" \\
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}
          
          # Download and inspect SBOM
          cosign verify-attestation --type spdxjson \\
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }} | jq .
          
          # Run SARAi
          docker run --rm -p 8080:8080 \\
            ghcr.io/${{ steps.repo.outputs.name }}:${{ github.ref_name }}
          \`\`\`
          
          ### 📊 Health Endpoints
          
          - Health: http://localhost:8080/health
          - Metrics: http://localhost:8080/metrics
          - Grafana Dashboard: ID 21902
          
          ### 🏁 Milestone Timeline
          
          EOF
          
          # Add milestone timestamps
          for milestone in .milestones/*.txt; do
            if [ -f "$milestone" ]; then
              MILESTONE_NAME=$(basename "$milestone" .txt)
              TIMESTAMP=$(head -n 1 "$milestone" | cut -d'=' -f2)
              if [ ! -z "$TIMESTAMP" ] && [ "$TIMESTAMP" != "true" ]; then
                RELATIVE_TIME=$((TIMESTAMP - START_TIME))
                echo "- **$MILESTONE_NAME**: +${RELATIVE_TIME}s" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🚀 Deployment successful!**" >> $GITHUB_STEP_SUMMARY
          
          echo "✅ M16: Final summary generated"
          
      - name: "💾 Save All Milestones Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-milestones-${{ github.ref_name }}
          path: .milestones/
          retention-days: 90
          if-no-files-found: warn  # Fix: No fallar si .milestones/ está vacío
