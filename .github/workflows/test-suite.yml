# ===================================================================
# SARAi v2.14+ - CI/CD Workflow: Test Suite Completo
# ===================================================================
# Ejecuta tests automatizados en cada push y PR
# Incluye: seguridad, chaos engineering, coverage
# ===================================================================

name: 🧪 Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Manual trigger

jobs:
  # ================================================================
  # Job 1: Tests de Seguridad (Safe Mode + Chaos)
  # ================================================================
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-xdist requests numpy pyyaml
      
      - name: 🧪 Test: Safe Mode Activation
        run: |
          make test-safe-mode || exit 1
      
      - name: 🌪️ Test: Chaos Engineering
        run: |
          make test-chaos || exit 1
      
      - name: 📊 Subir resultados
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: |
            logs/test_*.log
            state/safe_mode.flag
          retention-days: 7

  # ================================================================
  # Job 2: Tests de Performance (cuando se implemente fast-lane)
  # ================================================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: security-tests  # Solo si security pasa
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-xdist requests numpy pyyaml
      
      - name: ⏭️ Skip Fast Lane (no implementado)
        run: |
          echo "⚠️ Fast Lane tests requieren langgraph (pendiente)"
          echo "STATUS=skipped" >> $GITHUB_ENV
      
      # Cuando se implemente:
      # - name: ⚡ Test: Fast Lane Latency
      #   run: make test-fast-lane || exit 1

  # ================================================================
  # Job 3: Coverage Analysis
  # ================================================================
  coverage-analysis:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-tests
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Instalar dependencias completas
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist requests numpy pyyaml
      
      - name: 📊 Ejecutar tests con coverage
        run: |
          pytest tests/test_safe_mode_activation.py \
                 tests/test_chaos_engineering.py \
                 --cov=core \
                 --cov=agents \
                 --cov-report=html \
                 --cov-report=xml \
                 --cov-report=term-missing \
                 -v
      
      - name: 📈 Subir coverage a Codecov (opcional)
        uses: codecov/codecov-action@v4
        if: github.event_name == 'pull_request'
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
      
      - name: 📊 Subir reporte HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

  # ================================================================
  # Job 4: Validación de Auditoría
  # ================================================================
  audit-validation:
    name: 🔍 Audit Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml
      
      - name: 🔍 Validación rápida
        run: |
          python scripts/quick_validate.py
      
      - name: 📋 Auditoría completa (sin logs extensivos)
        run: |
          bash scripts/run_audit_checklist.sh --skip-logs

  # ================================================================
  # Job 5: Resumen de Resultados
  # ================================================================
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [security-tests, performance-tests, coverage-analysis, audit-validation]
    if: always()
    
    steps:
      - name: 📊 Generar resumen
        run: |
          echo "================================"
          echo "🧪 SARAi Test Suite Results"
          echo "================================"
          echo ""
          echo "Security Tests:     ${{ needs.security-tests.result }}"
          echo "Performance Tests:  ${{ needs.performance-tests.result }}"
          echo "Coverage Analysis:  ${{ needs.coverage-analysis.result }}"
          echo "Audit Validation:   ${{ needs.audit-validation.result }}"
          echo ""
          
          # Verificar si hay fallos
          if [ "${{ needs.security-tests.result }}" != "success" ]; then
            echo "❌ Security tests FAILED"
            exit 1
          fi
          
          if [ "${{ needs.audit-validation.result }}" != "success" ]; then
            echo "❌ Audit validation FAILED"
            exit 1
          fi
          
          echo "✅ All critical tests PASSED"
